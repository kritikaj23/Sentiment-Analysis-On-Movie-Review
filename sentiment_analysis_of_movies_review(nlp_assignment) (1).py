# -*- coding: utf-8 -*-
"""Sentiment Analysis of Movies Review(NLP Assignment).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x8DCDo9pTfdNb7GsjOJvxjTmhL_Omqwo
"""

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report
import nltk
from nltk.corpus import stopwords
import re

# Download NLTK stopwords
nltk.download('stopwords')
stop_words = set(stopwords.words('english'))

data = pd.read_csv('/content/IMDB Dataset.csv')

data.head()

data.info()

reviews = data['review']  # Text column
sentiments = data['sentiment']

# Convert sentiments to integers
# Assuming 'positive' -> 1 and 'negative' -> 0
sentiments = sentiments.map({'positive': 1, 'negative': 0})

# Verify if the mapping worked correctly
print(sentiments.head())

print(sentiments.unique())

sentiments = sentiments.map({'Positive': 1, 'Negative': 0})

def preprocess_text(text):
    text = re.sub(r'[^a-zA-Z\s]', '', text)
    text = text.lower()
    tokens = text.split()
    tokens = [word for word in tokens if word not in stop_words]
    return ' '.join(tokens)

processed_reviews = reviews.apply(preprocess_text)

vectorizer = CountVectorizer()
X_train_vectorized = vectorizer.fit_transform(X_train)
X_test_vectorized = vectorizer.transform(X_test)

data = data.dropna(subset=['sentiment'])
sentiments = data['sentiment'].map({'positive': 1, 'negative': 0})

print(sentiments.isnull().sum())

X_train, X_test, y_train, y_test = train_test_split(
    processed_reviews, sentiments, test_size=0.2, random_state=42
)

model = MultinomialNB()
model.fit(X_train_vectorized, y_train)

y_pred = model.predict(X_test_vectorized)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("\nClassification Report:\n", classification_report(y_test, y_pred))

def predict_sentiment(review):
    review = preprocess_text(review)
    vectorized_review = vectorizer.transform([review])
    prediction = model.predict(vectorized_review)
    return "Positive" if prediction[0] == 1 else "Negative"

test_review = "The movie was bad ! I hate it."
print("Review:", test_review)
print("Sentiment:", predict_sentiment(test_review))

test_review = "The movie was fantastic ! I love  it."
print("Review:", test_review)
print("Sentiment:", predict_sentiment(test_review))

